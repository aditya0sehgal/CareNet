[{"D:\\CareNet\\src\\App.js":"1","D:\\CareNet\\src\\components\\pages\\homepage\\PersonalHome.js":"2","D:\\CareNet\\src\\components\\pages\\Diabetes\\DiabetesForm.js":"3","D:\\CareNet\\src\\components\\pages\\HGraph\\HGraph.js":"4","D:\\CareNet\\src\\index.js":"5","D:\\CareNet\\src\\components\\pages\\Pneumonia\\Pneumonia.js":"6","D:\\CareNet\\src\\components\\pages\\Register\\Register.js":"7","D:\\CareNet\\src\\components\\pages\\Navbar.js":"8","D:\\CareNet\\src\\components\\pages\\homepage\\Data.js":"9","D:\\CareNet\\src\\components\\pages\\Register\\Signup.js":"10","D:\\CareNet\\src\\reportWebVitals.js":"11","D:\\CareNet\\src\\components\\pages\\Register\\Login.js":"12"},{"size":1319,"mtime":1614583640903,"results":"13","hashOfConfig":"14"},{"size":11327,"mtime":1616595158528,"results":"15","hashOfConfig":"14"},{"size":11930,"mtime":1616594683377,"results":"16","hashOfConfig":"14"},{"size":19963,"mtime":1616594729970,"results":"17","hashOfConfig":"14"},{"size":565,"mtime":1611253531833,"results":"18","hashOfConfig":"14"},{"size":4207,"mtime":1616245394998,"results":"19","hashOfConfig":"14"},{"size":1348,"mtime":1613463023228,"results":"20","hashOfConfig":"14"},{"size":3192,"mtime":1614193164694,"results":"21","hashOfConfig":"14"},{"size":1880,"mtime":1614583820630,"results":"22","hashOfConfig":"14"},{"size":3087,"mtime":1616245395017,"results":"23","hashOfConfig":"14"},{"size":375,"mtime":1606561871101,"results":"24","hashOfConfig":"14"},{"size":2337,"mtime":1613463023204,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"rrpe6l",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\CareNet\\src\\App.js",["54"],"D:\\CareNet\\src\\components\\pages\\homepage\\PersonalHome.js",["55"],"D:\\CareNet\\src\\components\\pages\\Diabetes\\DiabetesForm.js",["56"],"D:\\CareNet\\src\\components\\pages\\HGraph\\HGraph.js",["57","58"],"import React from 'react';\r\nimport HGraph, {\r\n  hGraphConvert,\r\n  calculateHealthScore\r\n} from '../../../../node_modules/hgraph-react'; // symlinked with 'yarn link' from project root.\r\n\r\nimport data2017 from \"../../data.json\";\r\nimport '../../HGraph.css';\r\nimport { Table  } from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter  } from 'reactstrap';\r\n\r\nclass Hgraph extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const converted2017 = this.convertDataSet(data2017);\r\n    console.log(data2017);\r\n    console.log(converted2017);\r\n    const yearData = [\r\n      {\r\n        label: '2017',\r\n        data: converted2017,\r\n        score: parseInt(calculateHealthScore(converted2017), 10)\r\n      },\r\n    ];\r\n\r\n    this.state = {\r\n      windowWidth: window.innerWidth,\r\n      yearData: [],\r\n      data: [],\r\n      historyOpen: false,\r\n      historyData: [],\r\n      formsubmit: false,\r\n      datavalue:[],\r\n      modal: false,\r\n      recomsubmitted : false,\r\n      recom : {},\r\n      logged: {}\r\n    }\r\n\r\n      console.log(this.state.data);\r\n      this.card = React.createRef();\r\n      this.toggle = this.toggle.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n      this.handleRecomSubmit = this.handleRecomSubmit.bind(this);\r\n    }\r\n\r\n      toggle() {\r\n      this.setState({ modal: !this.state.modal });\r\n     }\r\n\r\n      handleRecomSubmit(event) {\r\n        event.preventDefault();\r\n        const recomdata = new FormData(event.target);\r\n        const recomvalue = Object.fromEntries(recomdata.entries());\r\n        console.log( JSON.stringify(recomvalue) )\r\n        console.log(\"making request\", recomvalue)        \r\n        console.log(this.state.datavalue)     \r\n        recomvalue.alcoholUse = this.state.datavalue.alcoholUse;\r\n        recomvalue.bloodPressureDiastolic = this.state.datavalue.bloodPressureDiastolic;\r\n        recomvalue.bloodPressureSystolic = this.state.datavalue.bloodPressureSystolic;\r\n        recomvalue.exercise = this.state.datavalue.exercise;\r\n        recomvalue.glucose = this.state.datavalue.glucose;\r\n        recomvalue.sleep = this.state.datavalue.sleep;\r\n        recomvalue.totalCholesterol = this.state.datavalue.totalCholesterol;\r\n        recomvalue.waistCircumference = this.state.datavalue.waistCircumference;\r\n        recomvalue.weight = this.state.datavalue.weight;\r\n        recomvalue.nicotineUse = this.state.datavalue.nicotineUse;\r\n        console.log(recomvalue);\r\n\r\n        fetch('/hgraph-recom', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            body: JSON.stringify(recomvalue),\r\n          }).then((response) => {\r\n              response.json()\r\n              .then((body) => {\r\n              console.log(this.state);\r\n              console.log(body);\r\n              this.setState({ \r\n                  'recom': body ,\r\n                  'recomsubmitted' : true,\r\n                  modal: !this.state.modal\r\n              })\r\n              console.log(this.state);\r\n              console.log(Object.keys(this.state.recom));\r\n            //   alert(JSON.stringify(this.state.recom))\r\n              alert(\r\n                'Recommendations for you : \\n'+\r\n                Object.keys(this.state.recom).map((key, i) => (\r\n                this.state.recom[key] !== '-' ?\r\n                (' '+this.state.recom[key]+'\\n \\n' ): ''\r\n                // )\r\n                ))\r\n                )\r\n            });\r\n          });\r\n\r\n      }\r\n    convertDataSet = (data) => {\r\n      return data.map(d => {\r\n        const converted = hGraphConvert('male', d.metric, d);\r\n        converted.id = d.metric;\r\n        if (d.children) {\r\n          converted.children = d.children.map(c => {\r\n            const convertedChild = hGraphConvert('male', c.metric, c);\r\n            convertedChild.parentKey = c.parentKey;\r\n            convertedChild.id = c.metric;\r\n            console.log(convertedChild);\r\n            return convertedChild;\r\n          })\r\n        }\r\n        converted.value = d.value;\r\n        // console.log(converted);\r\n        return converted;\r\n      });\r\n    }\r\n\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n    document.addEventListener('mousedown', this.handleClick);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n    document.removeEventListener('mousedown', this.handleClick);\r\n  }\r\n\r\n  updateWindowDimensions = () => {\r\n    this.setState({ windowWidth: window.innerWidth });\r\n  }\r\n\r\n  setYearData = (index) => (e) => {\r\n    this.setState({\r\n      data: this.state.yearData[index]\r\n    })\r\n  }\r\n\r\n  handlePointClick = (data, event) => {\r\n    this.setState({\r\n      historyOpen: true,\r\n      historyData: data,\r\n    })\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    if (this.state.historyOpen && this.card.current && !this.card.current.contains(e.target)) {\r\n      this.setState({ historyOpen: false })\r\n    }\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const data = new FormData(event.target);\r\n    const value = Object.fromEntries(data.entries());\r\n    console.log( JSON.stringify(value) );  // View entered values from the form.\r\n    console.log( value );  // View entered values from the form.\r\n    this.setState({datavalue: value})\r\n    // To generate a json file having data from the form to use on the HGraph component.\r\n    let healthdataarray = []\r\n    for (var key in value) {\r\n    if (value.hasOwnProperty(key)) {\r\n      var val = value[key];\r\n\r\n      let current_obj = {\r\n        \"metric\": key,\r\n        \"value\": val,\r\n      }\r\n      healthdataarray.push(current_obj)\r\n      // console.log(current_obj ,key, val);\r\n    }\r\n  }\r\n    healthdataarray.push({\r\n      \"metric\": \"painLevel\",\r\n      \"value\": \"2\"})\r\n    healthdataarray.push({\r\n      \"metric\": \"happiness\",\r\n      \"value\": \"8\"})\r\n    healthdataarray.push({\r\n      \"metric\": \"other\",\r\n      \"value\" : \"0.5\"})\r\n    console.log(healthdataarray);  // replacement for data.json\r\n      \r\n    // Checking if our data from the form is converted to the correct data object.\r\n    \r\n    const convertedata = this.convertDataSet(healthdataarray);\r\n    console.log(healthdataarray);\r\n    console.log(convertedata); \r\n\r\n    const yearData = [\r\n      {\r\n        label: '2017',\r\n        data: convertedata,\r\n        score: parseInt(calculateHealthScore(convertedata), 10)\r\n      },\r\n    ];\r\n\r\n    console.log(yearData);\r\n    value.score=yearData[0].score;\r\n    console.log(value);\r\n    // Change the form submitted value to true to display the HGraph.\r\n    // Setting other state values.\r\n    this.setState({\r\n      yearData: yearData,\r\n      data: yearData[0],\r\n      historyData: yearData[0].data[0],\r\n      formsubmit: true\r\n    })\r\n\r\n    // this.setState({formsubmit: true}) \r\n    console.log(this.state);\r\n\r\n    // Send the health graph form data to the server.\r\n    fetch('/healthscore', {\r\n      method: 'POST', // or 'PUT'\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(value),\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      console.log('Success:', data);\r\n      this.setState({\r\n        logged : data\r\n      })\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error:', error);\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    const sizeBasedOnWindow = this.state.windowWidth / 2;\r\n    const size = sizeBasedOnWindow > 450 ? 450 : sizeBasedOnWindow;\r\n    // const historySize = this.card.current ? this.card.current.clientWidth - 20 : 0;\r\n\r\n    // backgroundImage:\"url('healthgraph.jpg')\r\n    return (\r\n      <div className=\"App\">\r\n      <div className=\"root-container\" style={{ height: this.state.formsubmit ? '370vh' :'170vh' }} >\r\n                       \r\n          <h1>\r\n            Health Score \r\n          </h1>\r\n          {/* <Button color=\"primary\">hello</Button> */}\r\n          <div className='box-container' >\r\n            {/* <form action='/healthscore' method='POST' onSubmit={this.handleClick}> */}\r\n            <form onSubmit={this.handleSubmit} autocomplete=\"off\">\r\n  \r\n                <div className='box'>\r\n                  <div className='input-group'>\r\n                      <label htmlFor='totalCholesterol'>\r\n                      Total Cholesterol\r\n                          </label>\r\n                      <input type='text' name='totalCholesterol' className='login-input' placeholder='Enter the value in mg/dl.'/>\r\n                  </div>\r\n                   \r\n                  <div className='input-group'>\r\n                    <label htmlFor='glucose'>\r\n                            Glucose\r\n                        </label>\r\n                    <input type='text' name='glucose' className='login-input' placeholder='Enter the value in mg/dl.'/>\r\n                  </div>\r\n\r\n                  <div className='input-group'>\r\n                    <label htmlFor='bloodPressureSystolic'>\r\n                        Systolic Blood Pressure\r\n                        </label>\r\n                    <input type='text' name='bloodPressureSystolic' className='login-input' placeholder='Enter the value in mm/Hg.'/>\r\n                  </div>\r\n                  \r\n                  <div className='input-group'>\r\n                    <label htmlFor='bloodPressureDiastolic'>\r\n                    Diastolic Blood Pressure\r\n                        </label>\r\n                    <input type='text' name='bloodPressureDiastolic' className='login-input' placeholder='Enter the value in mm/Hg.' />\r\n                  </div>\r\n                    \r\n                  <div className='input-group'>\r\n                    <label htmlFor='alcoholUse'>\r\n                    Alcohol Use\r\n                        </label>\r\n                    <input type='text' name='alcoholUse' className='login-input' placeholder='Enter the number of drinks/week.'/>\r\n                  </div>\r\n\r\n                  <div className='input-group'>\r\n                    <label htmlFor='nicotineUse'>\r\n                    Nicotine Use\r\n                        </label>\r\n                    <input type='text' name='nicotineUse' className='login-input' placeholder='Enter the number of nicotine/day.'/>\r\n                  </div>\r\n                  \r\n                  <div className='input-group'>\r\n                    <label htmlFor='waistCircumference'>\r\n                    Waist Circumference\r\n                        </label>\r\n                    <input type='text' name='waistCircumference' className='login-input' placeholder='Enter the value in inches.'/>\r\n                  </div>\r\n        \r\n                  <div className='input-group'>\r\n                    <label htmlFor='exercise'>\r\n                      Exercise\r\n                        </label>\r\n                    <input type='text' name='exercise' className='login-input' placeholder='Enter the value in hours/week.'/>\r\n                  </div>\r\n\r\n                  <div className='input-group'>\r\n                    <label htmlFor='sleep'>\r\n                      Sleep\r\n                        </label>\r\n                    <input type='text' name='sleep' className='login-input' placeholder='Enter the value in hours/night.'/>\r\n                  </div>\r\n\r\n                  <div className='input-group'>\r\n                    <label htmlFor='weight'>\r\n                      Weight\r\n                        </label>\r\n                    <input type='text' name='weight' className='login-input' placeholder='Enter the value in lbs.'/>\r\n                  </div>\r\n\r\n                  <button className='login-btn'>Get Health Score</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        <h3>\r\n        {/* <Button id=\"PopoverFocus\" color='primary' style={{borderRadius:'30px'}} type=\"button\">\r\n          Healthy Range Values\r\n        </Button>  */}\r\n        {/* <i style={{color:'whitesmoke'}} class=\"fa fa-info\"></i>  */}\r\n        </h3> \r\n        {this.state.formsubmit === true && \r\n        <div>\r\n        <div className=\"card\" \r\n        style={{ top: this.state.historyOpen ? '80vh' : '100vh' }} \r\n        ref={this.card}>\r\n              <div>\r\n                  <p>{ this.state.historyData.label }</p>\r\n                  <p>{ this.state.historyData.value } { this.state.historyData.unitLabel }</p>\r\n              </div>\r\n        </div>\r\n\r\n        <div className=\"vis-container\" style={{ height: this.state.historyOpen ? '50vh' : '100vh' }}>\r\n          <HGraph\r\n            data={ this.state.data.data }\r\n            score={ this.state.data.score }\r\n            width={ size }\r\n            height={ size }\r\n            fontColor={'rgb(0, 0, 0)'}\r\n            scoreFontColor={'rgb(255, 255, 255)'}\r\n            fontSize={ size < 300 ? 16 : 19 }\r\n            pointRadius={ size < 300 ? 5 : 10 }\r\n            scoreFontSize={ size < 300 ? 50 : 120 }\r\n            // onPointClick={false}\r\n            // zoomOnPointClick={false}\r\n            onPointClick={this.handlePointClick}\r\n            zoomOnPointClick={true}\r\n          />\r\n        </div>\r\n       <br></br>\r\n       <br></br>\r\n        <Table style={{fontWeight: 'bold'}} bordered>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Parameter</th>\r\n                    <th>Values Entered</th>\r\n                    <th>Healthy Range</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Total Cholesterol</td>\r\n                    <td style={{color: (0.25 <= this.state.datavalue['totalCholesterol'] &&  this.state.datavalue['totalCholesterol'] <= 0.75) ? \"green\":\"red\"}}>{this.state.datavalue['totalCholesterol']}</td>\r\n                    <td>0.25-0.75</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Glucose</td>\r\n                    <td  style={{color: (61 <= this.state.datavalue['glucose'] &&  this.state.datavalue['glucose'] <= 100) ? \"green\" : \"red\"}}>{this.state.datavalue['glucose']}</td>\r\n                    <td>61-100</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Systolic Blood Pressure</td>\r\n                    <td style={{color: 99 <= this.state.datavalue['bloodPressureSystolic'] && this.state.datavalue['bloodPressureSystolic'] <= 148 ? \"green\" : \"red\"}}>{this.state.datavalue['bloodPressureSystolic']}</td>\r\n                    <td>99-148</td>\r\n                  </tr>\r\n                  <tr>\r\n                 \r\n                    <td>Diastolic Blood Pressure</td>\r\n                    <td style={{color: 65 <= this.state.datavalue['bloodPressureDiastolic'] && this.state.datavalue['bloodPressureDiastolic'] <= 95 ? \"green\" : \"red\"}}>{this.state.datavalue['bloodPressureDiastolic']}</td>\r\n                    <td>65-95</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Alcohol Use</td>\r\n                    <td style={{color: 0 <= this.state.datavalue['alcoholUse'] && this.state.datavalue['alcoholUse'] <= 1 ? \"green\" : \"red\"}}>{this.state.datavalue['alcoholUse']}</td>\r\n                    <td>0-1</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Nicotine Use</td>\r\n                    <td style={{color: 0 <= this.state.datavalue['nicotineUse'] && this.state.datavalue['nicotineUse'] <= 1 ? \"green\" : \"red\"}}>{this.state.datavalue['nicotineUse']}</td>\r\n                    <td>0-1</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Waist Circumference</td>\r\n                    <td style={{color: 30 <= this.state.datavalue['waistCircumference'] && this.state.datavalue['waistCircumference'] <= 34.5 ? \"green\" : \"red\"}}>{this.state.datavalue['waistCircumference']}</td>\r\n                    <td>30.0-34.5</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Exercise</td>\r\n                    <td style={{color: 3 <= this.state.datavalue['exercise'] && this.state.datavalue['exercise'] <= 12 ? \"green\" : \"red\"}}>{this.state.datavalue['exercise']}</td>\r\n                    <td>3-12</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Sleep</td>\r\n                    <td style={{color: 7.1 <= this.state.datavalue['sleep'] && this.state.datavalue['sleep'] <= 8.0 ? \"green\" : \"red\"}}>{this.state.datavalue['sleep']}</td>\r\n                    <td>7.1-8.0</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Weight</td>\r\n                    <td style={{color: 170 <= this.state.datavalue['weight'] && this.state.datavalue['weight'] <= 205 ? \"green\" : \"red\"}}>{this.state.datavalue['weight']}</td>\r\n                    <td>170-205</td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n              \r\n              { this.state.logged.sessionuser >= 1 ? \r\n                  (\r\n                  <button className='login-btn' style={{marginBottom:'2%'}} onClick={this.toggle}>Get Recommendations</button>\r\n                  ) :\r\n                  (\r\n                  <Link to='/signup' className='btn-link'>\r\n                      <button className='login-btn' style={{marginBottom:'2%'}}>Login to Get Recommendations</button>\r\n                  </Link>\r\n                  )\r\n              }\r\n              <Modal isOpen={this.state.modal} modalTransition={{ timeout: 300 }} backdropTransition={{ timeout: 700 }}\r\n                        toggle={this.toggle}>\r\n                        <ModalHeader toggle={this.toggle}>Questionnaire</ModalHeader>\r\n                        <ModalBody>\r\n                            Please fill out this Questionnaire to get Personalised Recommendations.\r\n                            <form onSubmit={this.handleRecomSubmit} autocomplete=\"off\">\r\n                                <div className='box'>\r\n                                    <div className='input-group'>\r\n                                        <label htmlFor='Age'>\r\n                                            What is your Age?\r\n                                        </label>\r\n                                        <input type='text' name='Age' className='login-input' />\r\n                                    </div>\r\n                                \r\n                                    <div className='input-group'>\r\n                                        <label htmlFor='Gender'>\r\n                                        Enter your Gender(M/F).\r\n                                        </label>\r\n                                        <input type='text' name='Gender' className='login-input' />\r\n                                    </div>\r\n                                \r\n                                    <div className='input-group'>\r\n                                        <label htmlFor='Height'>\r\n                                        Enter your Height in inches.\r\n                                        </label>\r\n                                        <input type='text' name='Height' className='login-input' />\r\n                                    </div>\r\n                                \r\n                                <button className='login-btn'>Get Recommendations</button>\r\n                                </div>\r\n                            </form>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                        Note: These are some suggestions given based only on the Input parameters that you provide. It is always advisable to see a Doctor for better medication and health check-up.  \r\n                        </ModalFooter>\r\n                    </Modal>\r\n        </div>\r\n        \r\n        }\r\n\r\n\r\n        </div>\r\n      </div>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hgraph;\r\n\r\n\r\n",["59","60"],"D:\\CareNet\\src\\index.js",[],"D:\\CareNet\\src\\components\\pages\\Pneumonia\\Pneumonia.js",["61"],"D:\\CareNet\\src\\components\\pages\\Register\\Register.js",[],"D:\\CareNet\\src\\components\\pages\\Navbar.js",["62","63"],"import React,{useState, useEffect} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { Button  } from 'reactstrap';\r\nimport {BiDonateHeart} from 'react-icons/bi';\r\nimport {FaBars,FaTimes} from 'react-icons/fa';\r\nimport {IconContext} from 'react-icons';\r\nimport './navbar.css'   \r\n\r\nfunction Navbar() {\r\n    const [click,setClick]=useState(false);\r\n    const [button,setButton]=useState(true)\r\n    const handleclick =() =>setClick(!click);\r\n    const closedMenu=() =>setClick(false)\r\n    const showButton=()=>{\r\n        if(window.innerWidth<=960){\r\n            setButton(false);\r\n        }\r\n            else{\r\n            setButton(true)\r\n        }\r\n        };\r\n    window.addEventListener('resize',showButton);\r\n\r\n    const [user, setUserSession] = useState({user: ''})\r\n\r\n    useEffect(()=> {\r\n      fetch('/sessioninfo')\r\n      .then(response => response.json()\r\n      ).then(data => {\r\n            console.log(data);\r\n            console.log(user);\r\n\r\n            if(data['username']){\r\n                setUserSession({user : data['username']})\r\n            }\r\n            return ;\r\n    })\r\n    },[]);\r\n\r\n    return (\r\n        <>\r\n        <IconContext.Provider value={{color:'#fff'}}>\r\n      <div className='navbar'>\r\n          <div className='navbar-container container'>\r\n              <Link to='/' onClick={closedMenu}>\r\n                <h2 style={{textDecoration: 'none', color: 'white'}}>\r\n                CareNet &nbsp; \r\n                <BiDonateHeart className='navbar-icon'/>\r\n                </h2> \r\n              </Link>\r\n              <div className='menu-icon' onClick={handleclick}>\r\n                {click ?<FaTimes/> :<FaBars/>}\r\n              </div>\r\n              <ul className={click ? 'nav-menu active' : 'nav-menu'}\r\n                >\r\n        <li className='nav-item'>\r\n       <Link to='/' className='nav-links'>\r\n           Home\r\n       </Link>\r\n       </li>\r\n        <li className='nav-item'>\r\n       <Link to='/Hgraph' className='nav-links'>\r\n            Health Graph\r\n       </Link>\r\n       </li>\r\n       <li className='nav-item'>\r\n       <Link to='/Diagnostics' className='nav-links'>\r\n           Diagnostics\r\n       </Link>\r\n       </li> \r\n       \r\n       <li className='nav-btn'>\r\n           {/* {button ?(\r\n               <Link to='/signup' className='btn-link'>\r\n                   <Button>SIGN UP</Button>\r\n               </Link>\r\n           ):( */}\r\n           {user.user === ''  ? \r\n           \r\n            <Link to='/signup' className='btn-link'>\r\n                <Button>SIGN UP</Button>\r\n            </Link>\r\n           :\r\n            <Link style={{textDecoration: 'none'}} className='btn-link'>\r\n                \r\n                <Button onClick={() => fetch('/logout')\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    console.log(data); \r\n                    window.location.replace('/')\r\n                    }\r\n                )}> Logout - {user.user.toUpperCase()} </Button>\r\n            </Link>\r\n            \r\n           }\r\n           \r\n       </li>\r\n    </ul>          \r\n    </div>\r\n      </div>\r\n      </IconContext.Provider>\r\n</>        \r\n    )\r\n}\r\n\r\nexport default Navbar\r\n",["64","65"],"D:\\CareNet\\src\\components\\pages\\homepage\\Data.js",[],"D:\\CareNet\\src\\components\\pages\\Register\\Signup.js",[],"D:\\CareNet\\src\\reportWebVitals.js",[],"D:\\CareNet\\src\\components\\pages\\Register\\Login.js",[],{"ruleId":"66","severity":1,"message":"67","line":20,"column":5,"nodeType":"68","endLine":20,"endColumn":7,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":6,"column":7,"nodeType":"72","messageId":"73","endLine":6,"endColumn":11},{"ruleId":"70","severity":1,"message":"74","line":7,"column":10,"nodeType":"72","messageId":"73","endLine":7,"endColumn":16},{"ruleId":"70","severity":1,"message":"74","line":11,"column":10,"nodeType":"72","messageId":"73","endLine":11,"endColumn":16},{"ruleId":"70","severity":1,"message":"75","line":20,"column":11,"nodeType":"72","messageId":"73","endLine":20,"endColumn":19},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"70","severity":1,"message":"74","line":3,"column":10,"nodeType":"72","messageId":"73","endLine":3,"endColumn":16},{"ruleId":"70","severity":1,"message":"80","line":11,"column":12,"nodeType":"72","messageId":"73","endLine":11,"endColumn":18},{"ruleId":"66","severity":1,"message":"81","line":38,"column":7,"nodeType":"68","endLine":38,"endColumn":9,"suggestions":"82"},{"ruleId":"76","replacedBy":"83"},{"ruleId":"78","replacedBy":"84"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initialData'. Either include it or remove the dependency array.","ArrayExpression",["85"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'Button' is defined but never used.","'yearData' is assigned a value but never used.","no-native-reassign",["86"],"no-negated-in-lhs",["87"],"'button' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["88"],["86"],["87"],{"desc":"89","fix":"90"},"no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [initialData]",{"range":"93","text":"94"},"Update the dependencies array to be: [user]",{"range":"95","text":"96"},[797,799],"[initialData]",[1112,1114],"[user]"]