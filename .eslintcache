[{"D:\\CareNet\\src\\index.js":"1","D:\\CareNet\\src\\components\\pages\\HGraph\\HGraph.js":"2","D:\\CareNet\\src\\components\\pages\\homepage\\Data.js":"3","D:\\CareNet\\src\\components\\pages\\Diabetes\\DiabetesForm.js":"4","D:\\CareNet\\src\\components\\pages\\Navbar.js":"5"},{"size":565,"mtime":1611253531833,"results":"6","hashOfConfig":"7"},{"size":14565,"mtime":1614583640909,"results":"8","hashOfConfig":"7"},{"size":1880,"mtime":1614583820630,"results":"9","hashOfConfig":"7"},{"size":9281,"mtime":1614585204019,"results":"10","hashOfConfig":"7"},{"size":3192,"mtime":1614193164694,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"rrpe6l",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\CareNet\\src\\index.js",[],["25","26"],"D:\\CareNet\\src\\components\\pages\\HGraph\\HGraph.js",["27"],"import React from 'react';\r\nimport HGraph, {\r\n  hGraphConvert,\r\n  calculateHealthScore\r\n} from '../../../../node_modules/hgraph-react'; // symlinked with 'yarn link' from project root.\r\n\r\nimport data2017 from \"../../data.json\";\r\nimport '../../HGraph.css';\r\nimport { Table  } from 'reactstrap';\r\n\r\nclass Hgraph extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const converted2017 = this.convertDataSet(data2017);\r\n    console.log(data2017);\r\n    console.log(converted2017);\r\n    const yearData = [\r\n      {\r\n        label: '2017',\r\n        data: converted2017,\r\n        score: parseInt(calculateHealthScore(converted2017), 10)\r\n      },\r\n    ];\r\n\r\n    this.state = {\r\n      windowWidth: window.innerWidth,\r\n      yearData: [],\r\n      data: [],\r\n      historyOpen: false,\r\n      historyData: [],\r\n      formsubmit: false,\r\n      datavalue:[]\r\n    }\r\n\r\n    console.log(this.state.data);\r\n    this.card = React.createRef();\r\n  }\r\n\r\n  convertDataSet = (data) => {\r\n    return data.map(d => {\r\n      const converted = hGraphConvert('male', d.metric, d);\r\n      converted.id = d.metric;\r\n      if (d.children) {\r\n        converted.children = d.children.map(c => {\r\n          const convertedChild = hGraphConvert('male', c.metric, c);\r\n          convertedChild.parentKey = c.parentKey;\r\n          convertedChild.id = c.metric;\r\n          console.log(convertedChild);\r\n          return convertedChild;\r\n        })\r\n      }\r\n      converted.value = d.value;\r\n      // console.log(converted);\r\n      return converted;\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n    document.addEventListener('mousedown', this.handleClick);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n    document.removeEventListener('mousedown', this.handleClick);\r\n  }\r\n\r\n  updateWindowDimensions = () => {\r\n    this.setState({ windowWidth: window.innerWidth });\r\n  }\r\n\r\n  setYearData = (index) => (e) => {\r\n    this.setState({\r\n      data: this.state.yearData[index]\r\n    })\r\n  }\r\n\r\n  handlePointClick = (data, event) => {\r\n    this.setState({\r\n      historyOpen: true,\r\n      historyData: data,\r\n    })\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    if (this.state.historyOpen && this.card.current && !this.card.current.contains(e.target)) {\r\n      this.setState({ historyOpen: false })\r\n    }\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const data = new FormData(event.target);\r\n    const value = Object.fromEntries(data.entries());\r\n    console.log( JSON.stringify(value) );  // View entered values from the form.\r\n    console.log( value );  // View entered values from the form.\r\n    this.setState({datavalue: value})\r\n    // To generate a json file having data from the form to use on the HGraph component.\r\n    let healthdataarray = []\r\n    for (var key in value) {\r\n    if (value.hasOwnProperty(key)) {\r\n      var val = value[key];\r\n\r\n      let current_obj = {\r\n        \"metric\": key,\r\n        \"value\": val,\r\n      }\r\n      healthdataarray.push(current_obj)\r\n      // console.log(current_obj ,key, val);\r\n    }\r\n  }\r\n    healthdataarray.push({\r\n      \"metric\": \"painLevel\",\r\n      \"value\": \"2\"})\r\n    healthdataarray.push({\r\n      \"metric\": \"happiness\",\r\n      \"value\": \"8\"})\r\n    healthdataarray.push({\r\n      \"metric\": \"other\",\r\n      \"value\" : \"0.5\"})\r\n    console.log(healthdataarray);  // replacement for data.json\r\n      \r\n    // Checking if our data from the form is converted to the correct data object.\r\n    \r\n    const convertedata = this.convertDataSet(healthdataarray);\r\n    console.log(healthdataarray);\r\n    console.log(convertedata); \r\n\r\n    const yearData = [\r\n      {\r\n        label: '2017',\r\n        data: convertedata,\r\n        score: parseInt(calculateHealthScore(convertedata), 10)\r\n      },\r\n    ];\r\n\r\n    console.log(yearData);\r\n    value.score=yearData[0].score;\r\n    console.log(value);\r\n    // Change the form submitted value to true to display the HGraph.\r\n    // Setting other state values.\r\n    this.setState({\r\n      yearData: yearData,\r\n      data: yearData[0],\r\n      historyData: yearData[0].data[0],\r\n      formsubmit: true\r\n    })\r\n    // this.state = {\r\n    //   yearData: yearData,\r\n    //   data: yearData[0],\r\n    //   historyData: yearData[0].data[0],\r\n    //   formsubmit: true\r\n    // }\r\n\r\n    // this.setState({formsubmit: true}) \r\n    console.log(this.state);\r\n\r\n    // Send the health graph form data to the server.\r\n    fetch('/healthscore', {\r\n      method: 'POST', // or 'PUT'\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(value),\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      console.log('Success:', data);\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error:', error);\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    const sizeBasedOnWindow = this.state.windowWidth / 2;\r\n    const size = sizeBasedOnWindow > 450 ? 450 : sizeBasedOnWindow;\r\n    // const historySize = this.card.current ? this.card.current.clientWidth - 20 : 0;\r\n\r\n    // backgroundImage:\"url('healthgraph.jpg')\r\n    return (\r\n      <div className=\"App\">\r\n      <div className=\"root-container\" style={{ height: this.state.formsubmit ? '350vh' :'150vh' }} >\r\n                       \r\n          <h1>\r\n            Health Score \r\n          </h1>\r\n          {/* <Button color=\"primary\">hello</Button> */}\r\n          <div className='box-container' >\r\n            {/* <form action='/healthscore' method='POST' onSubmit={this.handleClick}> */}\r\n            <form onSubmit={this.handleSubmit}>\r\n  \r\n                <div className='box'>\r\n                  <div className='input-group'>\r\n                      <label htmlFor='totalCholesterol'>\r\n                      Total Cholesterol\r\n                          </label>\r\n                      <input type='text' name='totalCholesterol' className='login-input' placeholder='Enter the value in mg/dl.'/>\r\n                  </div>\r\n                   \r\n                  <div className='input-group'>\r\n                    <label htmlFor='glucose'>\r\n                            Glucose\r\n                        </label>\r\n                    <input type='text' name='glucose' className='login-input' placeholder='Enter the value in mg/dl.'/>\r\n                  </div>\r\n\r\n                  <div className='input-group'>\r\n                    <label htmlFor='bloodPressureSystolic'>\r\n                        Systolic Blood Pressure\r\n                        </label>\r\n                    <input type='text' name='bloodPressureSystolic' className='login-input' placeholder='Enter the value in mm/Hg.'/>\r\n                  </div>\r\n                  \r\n                  <div className='input-group'>\r\n                    <label htmlFor='bloodPressureDiastolic'>\r\n                    Diastolic Blood Pressure\r\n                        </label>\r\n                    <input type='text' name='bloodPressureDiastolic' className='login-input' placeholder='Enter the value in mm/Hg.' />\r\n                  </div>\r\n                    \r\n                  <div className='input-group'>\r\n                    <label htmlFor='alcoholUse'>\r\n                    Alcohol Use\r\n                        </label>\r\n                    <input type='text' name='alcoholUse' className='login-input' placeholder='Enter the number of drinks/week.'/>\r\n                  </div>\r\n\r\n                  <div className='input-group'>\r\n                    <label htmlFor='nicotineUse'>\r\n                    Nicotine Use\r\n                        </label>\r\n                    <input type='text' name='nicotineUse' className='login-input' placeholder='Enter the number of nicotine/day.'/>\r\n                  </div>\r\n                  \r\n                  <div className='input-group'>\r\n                    <label htmlFor='waistCircumference'>\r\n                    Waist Circumference\r\n                        </label>\r\n                    <input type='text' name='waistCircumference' className='login-input' placeholder='Enter the value in inches.'/>\r\n                  </div>\r\n        \r\n                  <div className='input-group'>\r\n                    <label htmlFor='exercise'>\r\n                      Exercise\r\n                        </label>\r\n                    <input type='text' name='exercise' className='login-input' placeholder='Enter the value in hours/week.'/>\r\n                  </div>\r\n\r\n                  <div className='input-group'>\r\n                    <label htmlFor='sleep'>\r\n                      Sleep\r\n                        </label>\r\n                    <input type='text' name='sleep' className='login-input' placeholder='Enter the value in hours/night.'/>\r\n                  </div>\r\n\r\n                  <div className='input-group'>\r\n                    <label htmlFor='weight'>\r\n                      Weight\r\n                        </label>\r\n                    <input type='text' name='weight' className='login-input' placeholder='Enter the value in lbs.'/>\r\n                  </div>\r\n\r\n                  <button className='login-btn'>Get Health Score</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        <h3>\r\n        {/* <Button id=\"PopoverFocus\" color='primary' style={{borderRadius:'30px'}} type=\"button\">\r\n          Healthy Range Values\r\n        </Button>  */}\r\n        {/* <i style={{color:'whitesmoke'}} class=\"fa fa-info\"></i>  */}\r\n        </h3> \r\n        {this.state.formsubmit === true && \r\n        <div>\r\n        <div className=\"card\" \r\n        style={{ top: this.state.historyOpen ? '80vh' : '100vh' }} \r\n        ref={this.card}>\r\n              <div>\r\n                  <p>{ this.state.historyData.label }</p>\r\n                  <p>{ this.state.historyData.value } { this.state.historyData.unitLabel }</p>\r\n              </div>\r\n        </div>\r\n\r\n        <div className=\"vis-container\" style={{ height: this.state.historyOpen ? '50vh' : '100vh' }}>\r\n          <HGraph\r\n            data={ this.state.data.data }\r\n            score={ this.state.data.score }\r\n            width={ size }\r\n            height={ size }\r\n            fontColor={'rgb(0, 0, 0)'}\r\n            scoreFontColor={'rgb(255, 255, 255)'}\r\n            fontSize={ size < 300 ? 16 : 19 }\r\n            pointRadius={ size < 300 ? 5 : 10 }\r\n            scoreFontSize={ size < 300 ? 50 : 120 }\r\n            // onPointClick={false}\r\n            // zoomOnPointClick={false}\r\n            onPointClick={this.handlePointClick}\r\n            zoomOnPointClick={true}\r\n          />\r\n        </div>\r\n       <br></br>\r\n       <br></br>\r\n        <Table style={{fontWeight: 'bold'}} bordered>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Parameter</th>\r\n                    <th>Values Entered</th>\r\n                    <th>Healthy Range</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Total Cholesterol</td>\r\n                    <td style={{color: (0.25 <= this.state.datavalue['totalCholesterol'] &&  this.state.datavalue['totalCholesterol'] <= 0.75) ? \"green\":\"red\"}}>{this.state.datavalue['totalCholesterol']}</td>\r\n                    <td>0.25-0.75</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Glucose</td>\r\n                    <td  style={{color: (61 <= this.state.datavalue['glucose'] &&  this.state.datavalue['glucose'] <= 100) ? \"green\" : \"red\"}}>{this.state.datavalue['glucose']}</td>\r\n                    <td>61-100</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Systolic Blood Pressure</td>\r\n                    <td style={{color: 99 <= this.state.datavalue['bloodPressureSystolic'] && this.state.datavalue['bloodPressureSystolic'] <= 148 ? \"green\" : \"red\"}}>{this.state.datavalue['bloodPressureSystolic']}</td>\r\n                    <td>99-148</td>\r\n                  </tr>\r\n                  <tr>\r\n                 \r\n                    <td>Diastolic Blood Pressure</td>\r\n                    <td style={{color: 65 <= this.state.datavalue['bloodPressureDiastolic'] && this.state.datavalue['bloodPressureDiastolic'] <= 95 ? \"green\" : \"red\"}}>{this.state.datavalue['bloodPressureDiastolic']}</td>\r\n                    <td>65-95</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Alcohol Use</td>\r\n                    <td style={{color: 0 <= this.state.datavalue['alcoholUse'] && this.state.datavalue['alcoholUse'] <= 1 ? \"green\" : \"red\"}}>{this.state.datavalue['alcoholUse']}</td>\r\n                    <td>0-1</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Nicotine Use</td>\r\n                    <td style={{color: 0 <= this.state.datavalue['nicotineUse'] && this.state.datavalue['nicotineUse'] <= 1 ? \"green\" : \"red\"}}>{this.state.datavalue['nicotineUse']}</td>\r\n                    <td>0-1</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Waist Circumference</td>\r\n                    <td style={{color: 30 <= this.state.datavalue['waistCircumference'] && this.state.datavalue['waistCircumference'] <= 34.5 ? \"green\" : \"red\"}}>{this.state.datavalue['waistCircumference']}</td>\r\n                    <td>30.0-34.5</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Exercise</td>\r\n                    <td style={{color: 3 <= this.state.datavalue['exercise'] && this.state.datavalue['exercise'] <= 12 ? \"green\" : \"red\"}}>{this.state.datavalue['exercise']}</td>\r\n                    <td>3-12</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Sleep</td>\r\n                    <td style={{color: 7.1 <= this.state.datavalue['sleep'] && this.state.datavalue['sleep'] <= 8.0 ? \"green\" : \"red\"}}>{this.state.datavalue['sleep']}</td>\r\n                    <td>7.1-8.0</td>\r\n                  </tr>\r\n                  <tr>\r\n                    \r\n                    <td>Weight</td>\r\n                    <td style={{color: 170 <= this.state.datavalue['weight'] && this.state.datavalue['weight'] <= 205 ? \"green\" : \"red\"}}>{this.state.datavalue['weight']}</td>\r\n                    <td>170-205</td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n        \r\n        </div>\r\n        \r\n        }\r\n        </div>\r\n      </div>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hgraph;\r\n\r\n\r\n","D:\\CareNet\\src\\components\\pages\\homepage\\Data.js",[],"D:\\CareNet\\src\\components\\pages\\Diabetes\\DiabetesForm.js",["28"],"import React, { Component } from 'react'\r\nimport '../../pages/Register/style.css'\r\nimport { Doughnut } from '@reactchartjs/react-chart.js'\r\n\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter  } from 'reactstrap';\r\n\r\nexport class DiabetesForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            result: '',\r\n            modal: false,\r\n            graphdata: {}\r\n        };\r\n    \r\n        this.toggle = this.toggle.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleRecomSubmit = this.handleRecomSubmit.bind(this);\r\n      }\r\n\r\n      toggle() {\r\n        this.setState({ modal: !this.state.modal });\r\n      }\r\n\r\n      handleRecomSubmit(event) {\r\n        event.preventDefault();\r\n        const data = new FormData(event.target);\r\n        const value = Object.fromEntries(data.entries());\r\n        console.log( JSON.stringify(value) )\r\n        console.log(\"making request\", data)        \r\n        console.log(this.state.result)        \r\n      }\r\n\r\n      handleSubmit(event) {\r\n        event.preventDefault();\r\n        const data = new FormData(event.target);\r\n        const value = Object.fromEntries(data.entries());\r\n        console.log( JSON.stringify(value) )\r\n        console.log(\"making request\", data)\r\n        \r\n        fetch('/predict', {\r\n            method: 'POST',\r\n            body: data,\r\n          }).then((response) => {\r\n              response.json()\r\n              .then((body) => {\r\n              console.log(this.state);\r\n              console.log(body);\r\n              this.setState({ \r\n                  'result': body ,\r\n                  'graphdata' : {\r\n                    labels: ['Diabetes Prediction', ' '],\r\n                    datasets: [\r\n                      {\r\n                        label: 'Prediction %',\r\n                        data: [Math.ceil(body.res*100), (100-(Math.ceil(body.res*100)))],\r\n                        backgroundColor: [\r\n                            'rgba(54, 162, 235, 0.2)',\r\n                            'rgba(255, 255, 255, 0.2)',\r\n                        ],\r\n                        borderColor: [\r\n                            'rgba(54, 162, 235, 1)',\r\n                            'rgba(211,211,211, 1)',\r\n                        ],\r\n                        borderWidth: 1,\r\n                      },\r\n                    ],       \r\n                    text: Math.ceil(body.res*100)\r\n                  }\r\n              })\r\n              console.log(this.state);\r\n            });\r\n          });\r\n  \r\n      }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className='root-container' >\r\n                <div className='header'>\r\n                Diabetes Predictor\r\n                </div>    \r\n                <div className='box-container' >\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <div className='box'>\r\n                        \r\n                        <div className='input-group'>\r\n                            <label htmlFor='pregnancies'>\r\n                                    Pregnancies\r\n                                </label>\r\n                            <input type='text' name='pregnancies' className='login-input' />\r\n                            </div>\r\n                        \r\n                            <div className='input-group'>\r\n                            <label htmlFor='glucose'>\r\n                                    Glucose\r\n                                </label>\r\n                            <input type='text' name='glucose' className='login-input' />\r\n                            </div>\r\n                            <div className='input-group'>\r\n                            <label htmlFor='bloodpressure'>\r\n                                    Blood Pressure\r\n                                </label>\r\n                            <input type='text' name='bloodpressure' className='login-input' />\r\n                            </div>\r\n                            <div className='input-group'>\r\n                            <label htmlFor='skinthickness'>\r\n                                    Skin Thickness\r\n                                </label>\r\n                            <input type='text' name='skinthickness' className='login-input' />\r\n                            </div>\r\n                            <div className='input-group'>\r\n                            <label htmlFor='insulin'>\r\n                                    Insulin Level\r\n                                </label>\r\n                            <input type='text' name='insulin' className='login-input' />\r\n                            </div>\r\n                            <div className='input-group'>\r\n                            <label htmlFor='bmi'>\r\n                                    Body Mass Index\r\n                                </label>\r\n                            <input type='text' name='bmi' className='login-input' />\r\n                            </div>\r\n                            <div className='input-group'>\r\n                            <label htmlFor='dpf'>\r\n                                    Diabetes Pedigree Function\r\n                                </label>\r\n                            <input type='text' name='dpf' className='login-input' />\r\n                            </div>\r\n                            <div className='input-group'>\r\n                            <label htmlFor='age'>\r\n                                    Age\r\n                                </label>\r\n                            <input type='text' name='age' className='login-input' />\r\n                            </div>\r\n                            <button type='submit' className='login-btn'>Predict</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n            { this.state.result !== '' && \r\n                <div style={{maxWidth:'98.0vw', maxHeight:'70vh', width:'98.0vw', height:'70vh'}}>\r\n                    <Doughnut width={100} height={60} options={{ maintainAspectRatio: false }} data={this.state.graphdata} />\r\n                    \r\n                    <br></br>\r\n                    <h1 className='pt-3' style={{color:'blue'}}>{  Math.ceil(this.state.result.res*100) } %</h1>\r\n                    \r\n                    {/* UNCOMMENT BELOW PART LATER */}\r\n                    <button className='login-btn' style={{marginBottom:'2%'}} onClick={this.toggle}>Get Recommendations</button>\r\n                    <br></br>\r\n                    \r\n                    <Modal isOpen={this.state.modal} modalTransition={{ timeout: 700 }} backdropTransition={{ timeout: 1300 }}\r\n                        toggle={this.toggle}>\r\n                        <ModalHeader toggle={this.toggle}>Questionnaire</ModalHeader>\r\n                        <ModalBody>\r\n                            Please fill out this Questionnaire to get Personalised Recommendations.\r\n                            <form onSubmit={this.handleRecomSubmit}>\r\n                                <div className='box'>\r\n                                    <div className='input-group'>\r\n                                        <label htmlFor='Smoking'>\r\n                                            Do you Smoke? (Y/N)\r\n                                        </label>\r\n                                        <input type='text' name='Smoking' className='login-input' />\r\n                                    </div>\r\n                                \r\n                                    <div className='input-group'>\r\n                                        <label htmlFor='Sleep'>\r\n                                        Enter the duration of sleep in Hours/Night.\r\n                                        </label>\r\n                                        <input type='text' name='Sleep' className='login-input' />\r\n                                    </div>\r\n                                \r\n                                    <div className='input-group'>\r\n                                        <label htmlFor='Exercise'>\r\n                                        Enter the duration of Exercise in Minutes/Week.\r\n                                        </label>\r\n                                        <input type='text' name='Exercise' className='login-input' />\r\n                                    </div>\r\n                                \r\n                                    <div className='input-group'>\r\n                                        <label htmlFor='Water'>\r\n                                        Enter the amount of water consumed daily in Litres.\r\n                                        </label>\r\n                                        <input type='text' name='Water' className='login-input' />\r\n                                    </div>\r\n                                </div>\r\n                                <button className='login-btn' type='submit'>Get Recommendations</button>\r\n                            </form>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                        </ModalFooter>\r\n                    </Modal>\r\n                </div> \r\n            }\r\n\r\n        </>               \r\n           \r\n        )\r\n    }\r\n}\r\n\r\nexport default DiabetesForm\r\n","D:\\CareNet\\src\\components\\pages\\Navbar.js",["29","30"],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":18,"column":11,"nodeType":"37","messageId":"38","endLine":18,"endColumn":19},{"ruleId":"35","severity":1,"message":"39","line":5,"column":10,"nodeType":"37","messageId":"38","endLine":5,"endColumn":16},{"ruleId":"35","severity":1,"message":"40","line":11,"column":12,"nodeType":"37","messageId":"38","endLine":11,"endColumn":18},{"ruleId":"41","severity":1,"message":"42","line":38,"column":7,"nodeType":"43","endLine":38,"endColumn":9,"suggestions":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'yearData' is assigned a value but never used.","Identifier","unusedVar","'Button' is defined but never used.","'button' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["47"],"no-global-assign","no-unsafe-negation",{"desc":"48","fix":"49"},"Update the dependencies array to be: [user]",{"range":"50","text":"51"},[1112,1114],"[user]"]