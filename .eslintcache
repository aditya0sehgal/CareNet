[{"C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\Register\\Register.js":"1","C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\HGraph\\HGraph.js":"2","C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\Diagnostics\\Diagnostics.js":"3","C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\homepage\\PersonalHome.js":"4","C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\Pneumonia\\Pneumonia.js":"5","C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\Diabetes\\DiabetesForm.js":"6","C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\index.js":"7","C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\homepage\\Home.js":"8","C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\Diagnostic.js":"9","C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\Register\\Login.js":"10","C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\Register\\Signup.js":"11","C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\homepage\\Data.js":"12","C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\Dashboard.js":"13"},{"size":1348,"mtime":1612292030181,"results":"14","hashOfConfig":"15"},{"size":21645,"mtime":1618403611009,"results":"16","hashOfConfig":"15"},{"size":196,"mtime":1612256808869,"results":"17","hashOfConfig":"15"},{"size":12802,"mtime":1618339232863,"results":"18","hashOfConfig":"15"},{"size":4405,"mtime":1618350039297,"results":"19","hashOfConfig":"15"},{"size":13354,"mtime":1618352599965,"results":"20","hashOfConfig":"15"},{"size":565,"mtime":1612256809441,"results":"21","hashOfConfig":"15"},{"size":1252,"mtime":1615748601343,"results":"22","hashOfConfig":"15"},{"size":2498,"mtime":1613376645873,"results":"23","hashOfConfig":"15"},{"size":2337,"mtime":1612291422129,"results":"24","hashOfConfig":"15"},{"size":3087,"mtime":1615918872944,"results":"25","hashOfConfig":"15"},{"size":1880,"mtime":1614599881715,"results":"26","hashOfConfig":"15"},{"size":1713,"mtime":1613732098387,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11llxa5",{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\Register\\Register.js",[],"C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\HGraph\\HGraph.js",["57","58","59"],"C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\Diagnostics\\Diagnostics.js",[],"C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\homepage\\PersonalHome.js",["60"],"import React, { Component } from 'react'\r\nimport { Line } from '@reactchartjs/react-chart.js';\r\n \r\nimport { Table  } from 'reactstrap';\r\n\r\nconst data = {\r\n    labels: ['1', '2', '3', '4', '5', '6'],\r\n    datasets: [\r\n      {\r\n        label: 'Your prediction history',\r\n        data: [12, 19, 3, 5, 2, 3],\r\n        fill: false,\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n        borderColor: 'rgba(255, 99, 132, 0.2)',\r\n      },\r\n    ],\r\n  }\r\n\r\nclass PersonalHome extends Component {\r\n    _isMounted = false;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            diabetes : {},\r\n            hgraph: {},\r\n            pneumonia: {},\r\n            dGData : {},\r\n            hGData: {},\r\n            pGData: {},\r\n            hlen: 0,\r\n            dlen: 0,\r\n            plen: 0,\r\n            dataishere : false\r\n        };\r\n\r\n      }\r\n    \r\n    componentDidMount(){\r\n        this._isMounted = true;\r\n        fetch(\"/userdata\", {\r\n            method:\"GET\",\r\n            cache: \"no-cache\",\r\n            }\r\n            ).then(response => {\r\n            return response.json()\r\n        })\r\n        .then(json => {\r\n            console.log(json)\r\n            this.setState({\r\n              diabetes: json['diabetesdata'],\r\n              dataishere : true, \r\n              hgraph: json['hgraphdata'],\r\n              hlen: json['hgraphdata'].length,\r\n              dlen: json['diabetesdata'].length,\r\n              plen: json['pneumoniadata'].length,\r\n              pneumonia: json['pneumoniadata'], \r\n            })\r\n            console.log(this.state.diabetes);\r\n            console.log(this.state.hgraph);\r\n            console.log(this.state.pneumonia); \r\n            \r\n            let p_y_values = []\r\n            let p_x_values = []\r\n            let d_y_values = []\r\n            let d_x_values = []\r\n            let h_y_values = []\r\n            let h_x_values = []\r\n            this.state.pneumonia.forEach(element => {\r\n                p_y_values.push(element.prediction === 'Normal'? 0:1)\r\n                let loopvar = element.date.split(\" \")\r\n                p_x_values.push([loopvar[0]+'\\n'+loopvar[1]])\r\n            });\r\n            this.state.hgraph.forEach(element => {\r\n                h_y_values.push(element.score)\r\n                let loopvar = element.date.split(\" \")\r\n                h_x_values.push([loopvar[0]+'\\n'+loopvar[1]])\r\n            });\r\n            this.state.diabetes.forEach(element => {\r\n                d_y_values.push(element.prediction)\r\n                let loopvar = element.date.split(\" \")\r\n                d_x_values.push([loopvar[0]+'\\n'+loopvar[1]])\r\n            });\r\n            console.log( p_x_values , p_y_values );\r\n            this.setState({\r\n              pGData: {\r\n                labels: p_x_values.length<5 ? p_x_values : p_x_values.slice(-5,),\r\n                datasets: [\r\n                  {\r\n                    label: 'Your prediction history data',\r\n                    data: p_y_values.length<5 ? p_y_values : p_y_values.slice(-5,),\r\n                    fill: false,\r\n                    backgroundColor: 'rgb( 0,0,255 )',\r\n                    borderColor: 'rgba( 0,0,255 , 0.5)',\r\n                  },\r\n                ],\r\n              },\r\n              hGData: {\r\n                labels: h_x_values.length<5 ? h_x_values : h_x_values.slice(-5,),\r\n                datasets: [\r\n                  {\r\n                    label: 'Your prediction history data',\r\n                    data: h_y_values.length<5 ? h_y_values : h_y_values.slice(-5,),\r\n                    fill: false,\r\n                    backgroundColor: 'rgb( 0,0,255 )',\r\n                    borderColor: 'rgba( 0,0,255 , 0.5)',\r\n                  },\r\n                ],\r\n              },\r\n              dGData: {\r\n                labels: d_x_values.length<5 ? d_x_values : d_x_values.slice(-5,),\r\n                datasets: [\r\n                  {\r\n                    label: 'Your prediction history data',\r\n                    data: d_y_values.length<5 ? d_y_values : d_y_values.slice(-5,),\r\n                    fill: false,\r\n                    backgroundColor: 'rgb( 0,0,255 )',\r\n                    borderColor: 'rgba( 0,0,255 , 0.5)',\r\n                  },\r\n                ],\r\n              }\r\n            })\r\n            console.log(this.state);\r\n          })\r\n      }\r\n\r\n      render() {\r\n        if(this.state.dataishere  === true){\r\n          return (\r\n              <div style={{width:'100vw', maxWidth:'100vw'}}>\r\n                { this.state.hlen > 0 ? \r\n                <> \r\n                  <br></br>\r\n                  <h2 className='pt-3 pb-3'>H-Graph Data</h2>                  \r\n                  <div style={{maxHeight:'50vh', display:'flex', height:'50vh'}}>\r\n                    <div style={{maxWidth:'48vw',display:'flex', width:'48vw'}}>\r\n                      <Line \r\n                          data={this.state.hGData} \r\n                          options={{ maintainAspectRatio: false }}\r\n                          width={50}\r\n                          height={50}\r\n                          style={{ float:'left'}} \r\n                      />\r\n                    </div>\r\n                    { this.state.hlen >= 5 ? \r\n                    <Table style={{fontWeight: 'bold', float:'right',width:'48vw', height:'50vh'}} striped hover>\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Date</th>\r\n                          <th>Health Score</th>\r\n                        </tr>\r\n                      </thead>\r\n                \r\n                      {/* { console.log( this.state.hgraph ) }\r\n                      { console.log( this.state.hGData.labels ) } */}\r\n                     {/* { Object.keys(githubData).map(key => ( <Issue key={key} details={githubData[key]} />)) } */}\r\n                      {/* { console.log( this.state.pGData.datasets.data ) } */}\r\n                      <tbody>\r\n                        <tr>\r\n                          <td style={{color:'red'}}>{this.state.hgraph.slice(-5,)[0].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.hgraph.slice(-5,)[0].score}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td style={{color:'red'}}>{this.state.hgraph.slice(-5,)[1].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.hgraph.slice(-5,)[1].score}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td style={{color:'red'}}>{this.state.hgraph.slice(-5,)[2].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.hgraph.slice(-5,)[2].score}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td style={{color:'red'}}>{this.state.hgraph.slice(-5,)[3].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.hgraph.slice(-5,)[3].score}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td style={{color:'red'}}>{this.state.hgraph.slice(-5,)[4].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.hgraph.slice(-5,)[4].score}</td>\r\n                        </tr>\r\n                        \r\n                      </tbody>\r\n\r\n                    </Table> : <> </> }\r\n                  </div>\r\n                </> : <> </> }\r\n                { this.state.dlen > 0 ? \r\n                <>\r\n                  <br></br>\r\n                  <br></br>\r\n                  <h2 className='pt-3 pd-3'>Diabetes Data</h2>\r\n                  <br></br>\r\n                  <div style={{ maxHeight:'50vh',  display:'flex', height:'50vh'}}>\r\n                  { this.state.dlen >= 5 ? \r\n                    <Table style={{fontWeight: 'bold', float:'left',width:'48vw', height:'50vh'}} striped hover>\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Date</th>\r\n                          <th>Diabetes Prediction</th>\r\n                        </tr>\r\n                      </thead>\r\n                \r\n                      <tbody>\r\n                        <tr>\r\n                          <td style={{color:'red'}}>{this.state.diabetes.slice(-5,)[0].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.diabetes.slice(-5,)[0].prediction}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td style={{color:'red'}}>{this.state.diabetes.slice(-5,)[1].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.diabetes.slice(-5,)[1].prediction}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td style={{color:'red'}}>{this.state.diabetes.slice(-5,)[2].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.diabetes.slice(-5,)[2].prediction}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td style={{color:'red'}}>{this.state.diabetes.slice(-5,)[3].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.diabetes.slice(-5,)[3].prediction }</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td style={{color:'red'}}>{this.state.diabetes.slice(-5,)[4].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.diabetes.slice(-5,)[4].prediction }</td>\r\n                        </tr>\r\n                        \r\n                      </tbody>\r\n\r\n                    </Table>  : <> </> }\r\n                    <div style={{maxWidth:'48vw',display:'flex', width:'48vw'}}>\r\n                      <Line \r\n                          data={this.state.dGData} \r\n                          options={{ maintainAspectRatio: false }}\r\n                          width={50}\r\n                          height={50}\r\n                          style={{ float:'right'}} \r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  </> : <> </> }\r\n                  <br></br>\r\n                  { this.state.plen > 0 ? \r\n                  <>\r\n                  <br></br>\r\n                  <h2 className='pt-3 pd-3'>Pneumonia Data</h2>\r\n                  <br></br>\r\n                  <div style={{ maxHeight:'50vh',display:'flex' , height:'50vh'}}>\r\n                    <div style={{maxWidth:'48vw',display:'flex', width:'48vw'}}>\r\n                      <Line \r\n                          data={this.state.pGData} \r\n                          options={{ maintainAspectRatio: false }}\r\n                          width={50}\r\n                          height={50}\r\n                          style={{ float:'left'}} \r\n                      />\r\n                    </div>\r\n                    { this.state.plen >= 5 ? \r\n                    <Table style={{fontWeight: 'bold', float:'right',width:'48vw', height:'50vh'}} striped hover>\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Date</th>\r\n                          <th>Pneumonia Prediction</th>\r\n                        </tr>\r\n                      </thead>\r\n              \r\n                      <tbody>\r\n                      <tr>\r\n                          <td style={{color:'red'}}>{this.state.pneumonia.slice(-5,)[0].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.pneumonia.slice(-5,)[0].prediction}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td style={{color:'red'}}>{this.state.pneumonia.slice(-5,)[1].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.pneumonia.slice(-5,)[1].prediction}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td style={{color:'red'}}>{this.state.pneumonia.slice(-5,)[2].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.pneumonia.slice(-5,)[2].prediction}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td style={{color:'red'}}>{this.state.pneumonia.slice(-5,)[3].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.pneumonia.slice(-5,)[3].prediction}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td style={{color:'red'}}>{this.state.pneumonia.slice(-5,)[4].date}</td>\r\n                          <td style={{color:'green'}}>{this.state.pneumonia.slice(-5,)[4].prediction}</td>\r\n                        </tr>\r\n                        \r\n                      </tbody>\r\n\r\n                    </Table>  : <> </> }\r\n                  </div>\r\n                </> : <> </> }\r\n              </div>\r\n          );\r\n        }\r\n        else{\r\n          return <></>\r\n        }\r\n      }\r\n    }\r\n\r\n    export default PersonalHome;\r\n\r\n\r\n","C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\Pneumonia\\Pneumonia.js",["61","62"],"C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\Diabetes\\DiabetesForm.js",["63"],"import React, { Component } from 'react'\r\nimport '../../pages/Register/style.css'\r\nimport { Doughnut } from '@reactchartjs/react-chart.js'\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter  } from 'reactstrap';\r\n\r\nexport class DiabetesForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            result: '',\r\n            modal: false,\r\n            modal1: false,\r\n            graphdata: {},\r\n            recomsubmitted : false,\r\n            recom : {}\r\n        };\r\n    \r\n        this.toggle = this.toggle.bind(this);\r\n        this.toggle1 = this.toggle1.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleRecomSubmit = this.handleRecomSubmit.bind(this);\r\n      }\r\n\r\n      toggle() {\r\n        this.setState({ modal: !this.state.modal });\r\n      }\r\n\r\n      toggle1() {\r\n        this.setState({ modal1: !this.state.modal1 });\r\n      }\r\n\r\n      handleRecomSubmit(event) {\r\n        event.preventDefault();\r\n        const recomdata = new FormData(event.target);\r\n        const recomvalue = Object.fromEntries(recomdata.entries());\r\n        console.log( JSON.stringify(recomvalue) )\r\n        console.log(\"making request\", recomvalue)        \r\n        console.log(this.state.result)        \r\n        recomvalue.age = this.state.result.age;\r\n        recomvalue.glucose = this.state.result.glucose;\r\n        recomvalue.bmi = this.state.result.bmi;\r\n        console.log(recomvalue);\r\n\r\n        fetch('/diabetes-recom', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            body: JSON.stringify(recomvalue),\r\n          }).then((response) => {\r\n              response.json()\r\n              .then((body) => {\r\n              console.log(this.state);\r\n              console.log(body);\r\n              this.setState({ \r\n                  'recom': body ,\r\n                  'recomsubmitted' : true,\r\n                  modal: !this.state.modal\r\n              })\r\n              console.log(this.state);\r\n              console.log(Object.keys(this.state.recom));\r\n            //   alert(JSON.stringify(this.state.recom))\r\n            //   alert(\r\n            //     'Recommendations for you : \\n'+\r\n            //     Object.keys(this.state.recom).map((key, i) => (\r\n            //     this.state.recom[key] !== '-' ?\r\n            //     (' => '+this.state.recom[key]+'\\n \\n' ): ''\r\n            //     // )\r\n            //     ))\r\n            //     )\r\n            });\r\n          });\r\n\r\n      }\r\n\r\n      handleSubmit(event) {\r\n        event.preventDefault();\r\n        const data = new FormData(event.target);\r\n        const value = Object.fromEntries(data.entries());\r\n        console.log( JSON.stringify(value) )\r\n        console.log(\"making request\", data)\r\n        \r\n        fetch('/predict', {\r\n            method: 'POST',\r\n            body: data,\r\n          }).then((response) => {\r\n              response.json()\r\n              .then((body) => {\r\n              console.log(this.state);\r\n              console.log(body);\r\n              this.setState({ \r\n                  'result': body ,\r\n                  'graphdata' : {\r\n                    labels: ['Diabetes Prediction', ' '],\r\n                    datasets: [\r\n                      {\r\n                        label: 'Prediction %',\r\n                        data: [Math.ceil(body.res*100), (100-(Math.ceil(body.res*100)))],\r\n                        backgroundColor: [\r\n                            'rgba(255, 0, 0, 0.4)',\r\n                            'rgba(255, 255, 255, 0.6)',\r\n                        ],\r\n                        borderColor: [\r\n                            'rgba(54, 162, 235, 1)',\r\n                            'rgba(211,211,211, 1)',\r\n                        ],\r\n                        borderWidth: 1,\r\n                      },\r\n                    ],       \r\n                    text: Math.ceil(body.res*100)\r\n                  }\r\n              })\r\n              console.log(this.state);\r\n            });\r\n          });\r\n  \r\n      }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className='root-container' style={{height:'190.0vh'}}>\r\n                <div className='header'>\r\n                Diabetes Predictor\r\n                </div>    \r\n                <div className='box-container' >\r\n                    <form onSubmit={this.handleSubmit} autocomplete=\"off\">\r\n                        <div className='box'>\r\n                        \r\n                        <div className='input-group'>\r\n                            <label htmlFor='pregnancies'>\r\n                                    Pregnancies\r\n                                </label>\r\n                            <input type='text' name='pregnancies' className='login-input' />\r\n                            </div>\r\n                        \r\n                            <div className='input-group'>\r\n                            <label htmlFor='glucose'>\r\n                                    Glucose\r\n                                </label>\r\n                            <input type='text' name='glucose' className='login-input' />\r\n                            </div>\r\n                            <div className='input-group'>\r\n                            <label htmlFor='bloodpressure'>\r\n                                    Blood Pressure\r\n                                </label>\r\n                            <input type='text' name='bloodpressure' className='login-input' />\r\n                            </div>\r\n                            <div className='input-group'>\r\n                            <label htmlFor='skinthickness'>\r\n                                    Skin Thickness\r\n                                </label>\r\n                            <input type='text' name='skinthickness' className='login-input' />\r\n                            </div>\r\n                            <div className='input-group'>\r\n                            <label htmlFor='insulin'>\r\n                                    Insulin Level\r\n                                </label>\r\n                            <input type='text' name='insulin' className='login-input' />\r\n                            </div>\r\n                            <div className='input-group'>\r\n                            <label htmlFor='bmi'>\r\n                                    Body Mass Index\r\n                                </label>\r\n                            <input type='text' name='bmi' className='login-input' />\r\n                            </div>\r\n                            <div className='input-group'>\r\n                            <label htmlFor='dpf'>\r\n                                    Diabetes Pedigree Function\r\n                                </label>\r\n                            <input type='text' name='dpf' className='login-input' />\r\n                            </div>\r\n                            <div className='input-group'>\r\n                            <label htmlFor='age'>\r\n                                    Age\r\n                                </label>\r\n                            <input type='text' name='age' className='login-input' />\r\n                            </div>\r\n                            <button type='submit' className='login-btn'>Predict</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            { this.state.result !== '' && \r\n                <>\r\n                <h2 style={{color:'red', top: 0, left: 0, margin: 0}}> There is a {  Math.ceil(this.state.result.res*100) } % chance of you being diabetic</h2>\r\n                <div style={{maxWidth:'98.0vw', maxHeight:'50vh', width:'98.0vw', height:'50vh' }}>\r\n                    \r\n                    {/* UNCOMMENT BELOW PART LATER */}\r\n                    \r\n                    <Doughnut width={100} height={60} options={{ maintainAspectRatio: false }} data={this.state.graphdata} />\r\n                    \r\n                    { this.state.result.sessionuser >= 1 ? \r\n                        (\r\n                        <button className='login-btn' onClick={this.toggle}>Get Recommendations</button>\r\n                        ) :\r\n                        (\r\n                        <Link to='/signup' className='btn-link'>\r\n                            <button className='login-btn' >Login to Get Recommendations</button>\r\n                        </Link>\r\n                        )\r\n                    }\r\n                    \r\n                    <br></br>\r\n                    {this.state.recomsubmitted === 'true' &&\r\n                                <h4>\r\n                                {Object.keys(this.state.recom).map((key, i) => (\r\n                                    this.state.recom[key] !== '-' && <p key={key}>\r\n                                        <span>{key}</span>\r\n                                        <span>{this.state.recom[key]}</span>\r\n                                    </p>\r\n                                    ))\r\n                                }\r\n                                </h4> \r\n                    }\r\n                    <Modal isOpen={this.state.modal} modalTransition={{ timeout: 700 }} backdropTransition={{ timeout: 1300 }}\r\n                        toggle={this.toggle}>\r\n                        <ModalHeader toggle={this.toggle}>Questionnaire</ModalHeader>\r\n                        <ModalBody>\r\n                            Please fill out this Questionnaire to get Personalised Recommendations.\r\n                            <form \r\n                            onSubmit={this.handleRecomSubmit}\r\n                            autocomplete=\"off\">\r\n                                <div className='box'>\r\n                                    <div className='input-group'>\r\n                                        <label htmlFor='Smoking'>\r\n                                            Do you Smoke? (Y/N)\r\n                                        </label>\r\n                                        <input type='text' name='Smoking' className='login-input' />\r\n                                    </div>\r\n                                \r\n                                    <div className='input-group'>\r\n                                        <label htmlFor='Sleep'>\r\n                                        Enter the duration of sleep in Hours/Night.\r\n                                        </label>\r\n                                        <input type='text' name='Sleep' className='login-input' />\r\n                                    </div>\r\n                                \r\n                                    <div className='input-group'>\r\n                                        <label htmlFor='Exercise'>\r\n                                        Enter the duration of Exercise in Minutes/Week.\r\n                                        </label>\r\n                                        <input type='text' name='Exercise' className='login-input' />\r\n                                    </div>\r\n                                \r\n                                    <div className='input-group'>\r\n                                        <label htmlFor='Water'>\r\n                                        Enter the amount of water consumed daily in Litres.\r\n                                        </label>\r\n                                        <input type='text' name='Water' className='login-input' />\r\n                                    </div>\r\n                                <button className='login-btn'onClick={this.toggle1}>Get Recommendations</button>\r\n                                </div>\r\n                            </form>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                        Note: These are some suggestions given based only on the Input parameters that you provide. It is always advisable to see a Doctor for better medication and health check-up.    \r\n                        </ModalFooter>\r\n                    </Modal>\r\n                    \r\n                    <Modal isOpen={this.state.modal1} modalTransition={{ timeout: 300 }} backdropTransition={{ timeout: 700 }}\r\n                        toggle={this.toggle1}>\r\n                        <ModalHeader> Recommendations for you : </ModalHeader>\r\n                        <ModalBody>\r\n                        { Object.keys(this.state.recom).map((key, i) => (\r\n                        this.state.recom[key] !== '-' ?\r\n                        ( <> <br></br> =&gt; {key.toUpperCase()} : {this.state.recom[key]} </> ) : ''\r\n                        )) }\r\n                        {/* <div style={{ textAlign: 'center' }}>\r\n                          <img src='https://i.pinimg.com/originals/d0/2a/86/d02a869cef390da6189b094ddf77d41f.jpg' ></img>\r\n                        </div> */}\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                        Note: These are some suggestions given based only on the Input parameters that you provide. It is always advisable to see a Doctor for better medication and health check-up.  \r\n                        </ModalFooter>\r\n                    </Modal>\r\n\r\n                </div> \r\n                </>\r\n            }\r\n            </div>\r\n        </>               \r\n           \r\n        )\r\n    }\r\n}\r\n\r\nexport default DiabetesForm\r\n",["64","65"],"C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\index.js",[],"C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\homepage\\Home.js",["66","67"],"C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\Diagnostic.js",["68","69"],"C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\Register\\Login.js",[],"C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\Register\\Signup.js",[],"C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\pages\\homepage\\Data.js",[],"C:\\Users\\adi\\Desktop\\carenet_Clone\\CareNet\\src\\components\\Dashboard.js",[],{"ruleId":"70","severity":1,"message":"71","line":11,"column":10,"nodeType":"72","messageId":"73","endLine":11,"endColumn":16},{"ruleId":"70","severity":1,"message":"74","line":20,"column":11,"nodeType":"72","messageId":"73","endLine":20,"endColumn":19},{"ruleId":"75","severity":1,"message":"76","line":513,"column":27,"nodeType":"77","endLine":513,"endColumn":116},{"ruleId":"70","severity":1,"message":"78","line":6,"column":7,"nodeType":"72","messageId":"73","endLine":6,"endColumn":11},{"ruleId":"70","severity":1,"message":"71","line":3,"column":10,"nodeType":"72","messageId":"73","endLine":3,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":100,"column":27,"nodeType":"77","endLine":100,"endColumn":116},{"ruleId":"70","severity":1,"message":"71","line":7,"column":10,"nodeType":"72","messageId":"73","endLine":7,"endColumn":16},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"70","severity":1,"message":"83","line":4,"column":9,"nodeType":"72","messageId":"73","endLine":4,"endColumn":20},{"ruleId":"84","severity":1,"message":"85","line":22,"column":7,"nodeType":"86","endLine":22,"endColumn":9,"suggestions":"87"},{"ruleId":"70","severity":1,"message":"88","line":3,"column":45,"nodeType":"72","messageId":"73","endLine":3,"endColumn":48},{"ruleId":"70","severity":1,"message":"89","line":3,"column":50,"nodeType":"72","messageId":"73","endLine":3,"endColumn":53},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'yearData' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'data' is assigned a value but never used.","no-native-reassign",["90"],"no-negated-in-lhs",["91"],"'homeObjFour' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["92"],"'Row' is defined but never used.","'Col' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},"Update the dependencies array to be: [user]",{"range":"95","text":"96"},[613,615],"[user]"]